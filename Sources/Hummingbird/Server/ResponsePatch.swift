//===----------------------------------------------------------------------===//
//
// This source file is part of the Hummingbird server framework project
//
// Copyright (c) 2021-2021 the Hummingbird authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See hummingbird/CONTRIBUTORS.txt for the list of Hummingbird authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

import NIOHTTP1

extension HBRequest {
    // MARK: Response patching

    /// Patches Response via `HBResponse.apply(patch:)`
    ///
    /// Allow you to patch the response generated by your route handler via the `HBRequest` supplied. If your handler is only
    /// returning the payload you can edit the status and headers via `request.response` eg.
    /// ```
    /// func myHandler(_ request: HBRequest) -> String {
    ///     request.response.status = .accepted
    ///     return "hello"
    /// }
    /// ```
    public class ResponsePatch {
        /// patch status of reponse
        public var status: HTTPResponseStatus?
        /// headers to add to response
        public var headers: HTTPHeaders

        init() {
            self.status = nil
            self.headers = [:]
        }
    }

    /// Allows you to edit the status and headers of the response
    public var response: ResponsePatch {
        get { self.extensions.getOrCreate(\.response, ResponsePatch()) }
        set { self.extensions.set(\.response, value: newValue) }
    }

    /// return `ResponsePatch` only if it exists. Used internally
    var optionalResponse: ResponsePatch? {
        self.extensions.get(\.response)
    }
}

extension HBResponse {
    /// apply `HBRequest.ResponsePatch` to `HBResponse`
    func apply(patch: HBRequest.ResponsePatch?) -> Self {
        guard let patch = patch else { return self }
        if let status = patch.status {
            self.status = status
        }
        self.headers.add(contentsOf: patch.headers)
        return self
    }
}
